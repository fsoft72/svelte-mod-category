/* This file is autogenerated by liwe3-svelte */
/* eslint-disable @typescript-eslint/no-inferrable-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */

/*=== f2c_start __file ===*/

/*=== f2c_end __file ===*/

import { get, patch, post, delete_, type LiWEFetcherOptions } from '$liwe3/utils/fetcher';

/**
 * The call creates a category inside the system.
 * This function returns the full `Category` structure
 *
 * @param title - Category title [req]
 * @param slug - Category slug [req]
 * @param id_parent - the parent Category (if any) [opt]
 * @param description - Category description [opt]
 * @param modules - The Module(s) the category is included in [opt]
 * @param top - Flag T/F if Category is a TOP category [opt]
 * @param visible - Flag T/F for category visibility [opt]
 * @param image - The category image [opt]
 *
 * @return category: Category
 *
 */
export const category_admin_add = async ( title: string, slug: string, id_parent?: string, description?: string, modules?: string[], top?: boolean, visible: boolean = true, image?: string, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/category/admin/add`, { 
		description,
		id_parent,
		image,
		modules,
		slug,
		title,
		top,
		visible
	 }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_admin_add ===*/

	/*=== f2c_end category_admin_add ===*/

	return res.category;
};

/**
 * The call updates a category inside the system.
 * This function returns the full `Category` structure
 *
 * @param id - the Category ID to update [req]
 * @param id_parent - the parent Category (if any) [opt]
 * @param title - Category title [opt]
 * @param slug - Category slug [opt]
 * @param description - Category description [opt]
 * @param modules - The Module(s) the category is included [opt]
 * @param top - Flag T/F if Category is a TOP category [opt]
 * @param visible - If the category is visible or not [opt]
 * @param image - The category image [opt]
 *
 * @return category: Category
 *
 */
export const category_admin_update = async ( id: string, id_parent?: string, title?: string, slug?: string, description?: string, modules?: string[], top?: boolean, visible?: boolean, image?: string, _options?: LiWEFetcherOptions ) => {
	const res = await patch( `/api/category/admin/update`, { 
		description,
		id,
		id_parent,
		image,
		modules,
		slug,
		title,
		top,
		visible
	 }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_admin_update ===*/

	/*=== f2c_end category_admin_update ===*/

	return res.category;
};

/**
 * The call modifies a single field.
 * This function returns the full `Category` structure
 *
 * @param id - The category ID [req]
 * @param data - The field / value to patch [req]
 *
 * @return category: Category
 *
 */
export const category_admin_fields = async ( id: string, data: any, _options?: LiWEFetcherOptions ) => {
	const res = await patch( `/api/category/admin/fields`, { id, data }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_admin_fields ===*/

	/*=== f2c_end category_admin_fields ===*/

	return res.category;
};

/**
 * The call lists all categories in the system.
 * This function returns the full `Category[]` structure
 *
 * @param parent_only - If T, returns only the first level categories [opt]
 *
 * @return categories: Category
 *
 */
export const category_admin_list = async ( parent_only?: boolean, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/category/admin/list`, { parent_only }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_admin_list ===*/

	/*=== f2c_end category_admin_list ===*/

	return res.categories;
};

/**
 * This call deletes a category. If the category contains sub categories, all sub categories will be deleted as well, recursively.
 *
 * @param id - Ths ID category to be deleted [req]
 *
 * @return id: str
 *
 */
export const category_admin_del = async ( id: string, _options?: LiWEFetcherOptions ) => {
	const res = await delete_( `/api/category/admin/del`, { id }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_admin_del ===*/

	/*=== f2c_end category_admin_del ===*/

	return res.id;
};

/**
 * The call updates a category adding a new module.
 * This function returns the full `Category` structure
 *
 * @param id - the Category ID to update [req]
 * @param module - The module to add [req]
 *
 * @return category: Category
 *
 */
export const category_admin_module_add = async ( id: string, module: string, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/category/admin/module/add`, { id, module }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_admin_module_add ===*/

	/*=== f2c_end category_admin_module_add ===*/

	return res.category;
};

/**
 * The call updates a category deleting a new module.
 * This function returns the full `Category` structure
 *
 * @param id - the Category ID to update [req]
 * @param module - The module to be removed [req]
 *
 * @return category: Category
 *
 */
export const category_admin_module_del = async ( id: string, module: string, _options?: LiWEFetcherOptions ) => {
	const res = await delete_( `/api/category/admin/module/del`, { id, module }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_admin_module_del ===*/

	/*=== f2c_end category_admin_module_del ===*/

	return res.category;
};

/**
 * This endpoint returns all the categories as a tree
 *
 * @param id_category - The starting id_category [opt]
 * @param module - The starting module [opt]
 *
 * @return tree: CategoryTreeItem
 *
 */
export const category_list = async ( id_category?: string, module?: string, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/category/list`, { id_category, module }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_list ===*/

	/*=== f2c_end category_list ===*/

	return res.tree;
};

/**
 * This endpoint returns all the top categories (parent)
 *
 * @param module - The starting module [opt]
 * @param limit - Maximum number of categories to return [opt]
 *
 * @return categs: CategorySmallItem
 *
 */
export const category_top_list = async ( module?: string, limit?: number, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/category/top/list`, { module, limit }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_top_list ===*/

	/*=== f2c_end category_top_list ===*/

	return res.categs;
};

/**
 * @param slug - The slug to check [req]
 * @param id - The ID category (if exists) [opt]
 *
 * @return ok: boolean
 *
 */
export const category_slug_valid = async ( slug: string, id?: string, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/category/slug/valid`, { slug, id }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start category_slug_valid ===*/

	/*=== f2c_end category_slug_valid ===*/

	return res.ok;
};
